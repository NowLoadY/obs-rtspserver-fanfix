name: 'CI Windows Release'

on:
    release:
      types: [published]
#    push:
#    paths-ignore:
#      - 'docs/**'
#    tags:
#      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  windows:
    name: 'Windows 32+64bit'
    runs-on: [windows-latest]
    env:
      QT_VERSION: '5.10.1'
      WINDOWS_DEPS_VERSION: '2017'
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      CMAKE_SYSTEM_VERSION: "10.0"
    steps:
      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.0.0
      - name: 'Install prerequisite: QT'
        run: |
          curl -kLO https://cdn-fastly.obsproject.com/downloads/Qt_${{ env.QT_VERSION }}.7z -f --retry 5 -C -
          7z x Qt_${{ env.QT_VERSION }}.7z -o"${{ github.workspace }}\cmbuild\QT"
      - name: 'Install prerequisite: Pre-built OBS dependencies'
        run: |
          curl -kLO https://cdn-fastly.obsproject.com/downloads/dependencies${{ env.WINDOWS_DEPS_VERSION }}.zip -f --retry 5 -C -
          7z x dependencies${{ env.WINDOWS_DEPS_VERSION }}.zip -o"${{ github.workspace }}\cmbuild\deps"
      - name: 'Install prerequisite: NSIS'
        working-directory: ${{ github.workspace }}
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop bucket add extras
          scoop install nsis
      - name: 'Checkout OBS'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: ${{ github.workspace }}/obs-studio
          submodules: 'recursive'
      - name: 'Checkout obs-rtspserver'
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/obs-studio/plugins/obs-rtspserver
          submodules: 'recursive'
      - name: 'Get OBS-Studio git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=OBS_GIT_BRANCH::$(git rev-parse --abbrev-ref HEAD)
          echo ::set-env name=OBS_GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=OBS_GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Checkout last OBS-Studio release (${{ env.OBS_GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git checkout ${{ env.OBS_GIT_TAG }}
          git submodule update
      - name: 'Get obs-rtspserver git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio/plugins/obs-rtspserver
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}
          echo ::set-env name=GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=GIT_TAG::$(git describe --tags --abbrev=0)
#     - name: 'Restore OBS 32-bit build v${{ env.OBS_GIT_TAG }} from cache'
#       id: build-cache-obs-32
#       uses: actions/cache@v1
#       env:
#         CACHE_NAME: 'build-cache-obs-32'
#       with:
#         path: ${{ github.workspace }}/obs-studio/build32
#         key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.OBS_GIT_TAG }}
#         restore-keys: |
#           ${{ runner.os }}-${{ env.CACHE_NAME }}-
      - name: 'Add obs-rtspserver Subdirectory'
        working-directory: ${{ github.workspace }}/obs-studio/plugins
        run: echo "add_subdirectory(obs-rtspserver)" >> .\CMakeLists.txt
      - name: 'Configure OBS 32-bit'
#       if: steps.build-cache-obs-32.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir .\build32
          cd .\build32
          cmake -G "${{ env.CMAKE_GENERATOR }}" -A Win32 -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DQTDIR="${{ github.workspace }}\cmbuild\QT\${{ env.QT_VERSION }}\msvc2017" -DDepsPath="${{ github.workspace }}\cmbuild\deps\win32" -DBUILD_CAPTIONS=YES -DCOPIED_DEPENDENCIES=NO -DCOPY_DEPENDENCIES=YES ..
      - name: 'Build obs-rtspserver 32-bit'
#       if: steps.build-cache-obs-32.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          msbuild /m /p:Configuration=RelWithDebInfo .\build32\plugins\obs-rtspserver\obs-rtspserver.vcxproj
#     - name: 'Restore OBS 64-bit build v${{ env.OBS_GIT_TAG }} from cache'
#       id: build-cache-obs-64
#       uses: actions/cache@v1
#       env:
#         CACHE_NAME: 'build-cache-obs-64'
#       with:
#         path: ${{ github.workspace }}/obs-studio/build64
#         key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.OBS_GIT_TAG }}
#         restore-keys: |
#           ${{ runner.os }}-${{ env.CACHE_NAME }}-
      - name: 'Configure OBS 64-bit'
#       if: steps.build-cache-obs-64.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir .\build64
          cd .\build64
          cmake -G "${{ env.CMAKE_GENERATOR }}" -A x64 -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DQTDIR="${{ github.workspace }}\cmbuild\QT\${{ env.QT_VERSION }}\msvc2017_64" -DDepsPath="${{ github.workspace }}\cmbuild\deps\win64" -DBUILD_CAPTIONS=YES -DCOPIED_DEPENDENCIES=NO -DCOPY_DEPENDENCIES=YES ..
      - name: 'Build obs-rtspserver 64-bit'
#       if: steps.build-cache-obs-64.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          msbuild /m /p:Configuration=RelWithDebInfo .\build64\plugins\obs-rtspserver\obs-rtspserver.vcxproj
      - name: 'Set release filename'
        shell: bash
        run: |
          FILENAME="obs-rtspserver-${{ env.GIT_TAG }}-windows"
          echo "::set-env name=WIN_FILENAME::$FILENAME"
      - name: 'Package obs-rtspserver'
        working-directory: ${{ github.workspace }}
        run: |
          mkdir build-package\obs-plugins\64bit
          mkdir build-package\obs-plugins\32bit
          mkdir build-package\data\obs-plugins\obs-rtspserver\locale\
          robocopy .\obs-studio\build64\plugins\obs-rtspserver\RelWithDebInfo\ .\build-package\obs-plugins\64bit\ obs-rtspserver.dll obs-rtspserver.pdb
          robocopy .\obs-studio\build32\plugins\obs-rtspserver\RelWithDebInfo\ .\build-package\obs-plugins\32bit\ obs-rtspserver.dll obs-rtspserver.pdb
          robocopy /E .\obs-studio\plugins\obs-rtspserver\data\ .\build-package\data\obs-plugins\obs-rtspserver\ *
          robocopy .\obs-studio\plugins\obs-rtspserver\ .\installer\ LICENSE
          robocopy .\obs-studio\plugins\obs-rtspserver\installer\ .\installer\ installer.nsi obs.ico
          mkdir release
          7z a ".\release\${{ env.WIN_FILENAME }}.zip" ".\build-package\*"
      - name: 'Publish ${{ env.WIN_FILENAME }}.zip'
        id: create_release
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: '${{ env.GIT_TAG }}-windows'
          path: ${{ github.workspace }}\release\*.zip
      - name: Build obs-rtspserver installer
        working-directory: ${{ github.workspace }}\installer
        run: makensis /DVERSION=${{ env.GIT_TAG }} .\installer.nsi
      - name: 'Publish ${{ env.WIN_FILENAME }}-windows-installer.exe'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: '${{ env.GIT_TAG }}-windows-installer'
          path: ${{ github.workspace }}\build-package\*.exe

  make-release:
    name: 'Upload release'
    runs-on: [ubuntu-latest]
    needs: [windows]
    steps:
      - name: 'Get the version'
        shell: bash
        id: get_version
        run: |
          echo ::set-env name=TAG_VERSION::${GITHUB_REF/refs\/tags\//}
#      - name: 'Create Release'
#        id: create_release
#         uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ env.TAG_VERSION }}
#          release_name: obs-rtspserver ${{ env.TAG_VERSION }}
#          draft: false
#          prerelease: false
      - name: 'Download release artifacts'
        uses: actions/download-artifact@v2-preview
      - name: 'Upload Windows .zip artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.TAG_VERSION }}-windows/obs-rtspserver-${{ env.TAG_VERSION }}-windows.zip
          asset_name: obs-rtspserver-${{ env.TAG_VERSION }}-windows.zip
          asset_content_type: application/zip
      - name: 'Upload Windows .exe artifact to release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.TAG_VERSION }}-windows-installer/obs-rtspserver-${{ env.TAG_VERSION }}-windows-installer.exe
          asset_name: obs-rtspserver-${{ env.TAG_VERSION }}-windows-installer.exe
          asset_content_type: application/zip
